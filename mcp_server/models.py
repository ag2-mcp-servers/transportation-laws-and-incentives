# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:42:46+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel


class Category(BaseModel):
    category_type: str = Field(
        ...,
        description='The type of category. (E.g. tech, incentive, regulation, user)',
    )
    code: str = Field(..., description='The code used to identify the category')
    title: str = Field(..., description='The full name of the category')


class FullCategory(BaseModel):
    category_type: str = Field(
        ...,
        description='The type of category. (E.g. tech, incentive, regulation, user)',
    )
    code: str = Field(..., description='The code used to identify the category')
    help_text: Optional[str] = Field(
        None, description='A short description of what the law category encompasses'
    )
    sort_order: str = Field(..., description='The sort order for the categories')
    title: str = Field(..., description='The full name of the category')


class Inputs(RootModel[Any]):
    root: Any = Field(..., description='The parameters that were passed to the API')


class LawReference(BaseModel):
    description: str = Field(..., description='The context of the reference')
    url: str = Field(..., description='The url linking to the reference.')


class LawTopics(BaseModel):
    id: int = Field(..., description='The database id of the law topic')
    sort_order: int = Field(..., description='The sort order of the law topic')
    title: str = Field(..., description='The name of the law topic')


class LawType(BaseModel):
    code: str = Field(..., description='The code used to identify the law type')
    id: int = Field(..., description='The id of the law type')
    title: str = Field(..., description='The name of the law type')


class Metadata(BaseModel):
    count: Optional[int] = Field(
        None,
        description='If the request returns an array of results, this is the number of results returned in the array',
    )
    version: str = Field(..., description='This is the version of the api')


class Poc(BaseModel):
    agency: Optional[str] = Field(
        None, description='The agency that the contact represents'
    )
    email: Optional[str] = Field(None, description='The contacts email address')
    fax: Optional[str] = Field(None, description='The contacts fax number')
    name: str = Field(..., description='The name of the contact')
    state: str = Field(
        ...,
        description="The state in which the contact is based ('US' for Federal laws and 'DC' for the District of Columbia)",
    )
    telephone: Optional[str] = Field(None, description='The contacts phone number')
    title: Optional[str] = Field(None, description='The job title of the contact')
    web_page: Optional[str] = Field(None, description='The contacts webpage')


class PocResults(BaseModel):
    inputs: Inputs
    metadata: Metadata
    result: List[Poc] = Field(
        ..., description='The array of Points of Contacts for the state requested'
    )


class OutputFormat(Enum):
    json = 'json'
    xml = 'xml'
    csv = 'csv'


class Type(Enum):
    tech = 'tech'
    user = 'user'
    regulation = 'regulation'
    incentive = 'incentive'


class OutputFormat1(Enum):
    json = 'json'
    xml = 'xml'


class CategoryResults(BaseModel):
    inputs: Inputs
    metadata: Metadata
    result: List[FullCategory] = Field(
        ..., description='The array of law categories returned'
    )


class Law(BaseModel):
    agency: Optional[str] = Field(
        None,
        description='The agency with primary responsibility for federal incentives/regulations.',
    )
    amended_date: Optional[datetime] = Field(
        None,
        description='The date the incentive/law/regulation was updated through new legislation or rulemaking.',
    )
    archived_date: Optional[datetime] = Field(
        None,
        description='The date that an incentive/law/regulation is no longer relevant to the database. This may include longstanding Executive Orders or laws requiring legislative studies that have been completed.',
    )
    categories: List[Category] = Field(
        ..., description='The various law categories that apply to this law'
    )
    contacts: Optional[List[Poc]] = Field(
        None,
        description='The contacts for the given law, returned only if the parameter poc is true',
    )
    enacted_date: Optional[datetime] = Field(
        None,
        description='The date the enacting legislation (if applicable) was signed into law.',
    )
    expired_date: Optional[datetime] = Field(
        None, description='The date the incentive/law/regulation is set to end.'
    )
    id: int = Field(
        ...,
        description='A unique identifier for this specific incentive/law/regulation.',
    )
    is_recent: Optional[bool] = Field(
        None,
        description='The true or false value used to distinguish between recent federal executive actions (TRUE) and active incentives/laws/regulations (FALSE).',
    )
    plaintext: str = Field(
        ...,
        description='Description of the incentive/law/regulation, including applicable legislative references, in <a href="https://guides.github.com/features/mastering-markdown/">markdown formatting</a>',
    )
    recent_update_or_new: Optional[str] = Field(
        None,
        description='An indicator if the last significant update was an update or the laws creation.',
    )
    references: List[LawReference] = Field(
        ...,
        description='The URL associated with any bill or legislative reference included in the description.',
    )
    repealed_date: Optional[datetime] = Field(
        None,
        description='The date legislation is enacted or a rulemaking is finalized to repeal the incentive/law/regulation.',
    )
    seq_num: Optional[int] = Field(
        None,
        description='The numerical value assigned to a description to show the order in which it is displayed online within a jurisdiction (state).',
    )
    significant_update_date: Optional[datetime] = Field(
        None, description='When the last significant update to the law was made.'
    )
    state: str = Field(
        ...,
        description='The state in which the incentive/law/regulation was enacted and is active.',
    )
    text: str = Field(
        ...,
        description='Description of the incentive/law/regulation, including applicable legislative references, html formated.',
    )
    title: str = Field(
        ...,
        description='The brief title assigned to the incentive/law/regulation description.',
    )
    topics: List[LawTopics] = Field(
        ...,
        description='For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards',
    )
    type: str = Field(
        ...,
        description='The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives',
    )
    types: List[LawType] = Field(..., description='The types that apply to this law')


class LawResult(BaseModel):
    inputs: Inputs
    metadata: Metadata
    result: Law


class LawsResponse(BaseModel):
    inputs: Inputs
    metadata: Metadata
    result: List[Law] = Field(..., description='The array of laws returned')
