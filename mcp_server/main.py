# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:42:46+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    CategoryResults,
    LawResult,
    LawsResponse,
    OutputFormat,
    OutputFormat1,
    PocResults,
    Type,
)

app = MCPProxy(
    contact={'x-twitter': 'NRELdev'},
    description='Query our database of federal and state laws and incentives for alternative fuels and vehicles, air quality, fuel efficiency, and other transportation-related topics. This dataset powers the <a href="https://afdc.energy.gov/laws">Federal and State Laws and Incentives</a> on the Alternative Fuels Data Center.',
    title='Transportation Laws and Incentives',
    version='0.1.0',
    servers=[{'url': '/api/transportation-incentives-laws'}],
)


@app.get(
    '/v1.{output_format}',
    tags=['transportation_laws_operations', 'transportation_incentives_management'],
)
def transportation_incentives_laws_all(
    output_format: OutputFormat = 'json',
    api_key: str = 'DEMO_KEY',
    limit: Optional[int] = 10,
    jurisdiction: Optional[str] = None,
    technology: Optional[str] = None,
    incentive_type: Optional[str] = None,
    regulation_type: Optional[str] = None,
    user_type: Optional[str] = None,
    poc: Optional[bool] = False,
    recent: Optional[bool] = False,
    expired: Optional[bool] = False,
    law_type: Optional[str] = None,
    keyword: Optional[str] = None,
    local: Optional[bool] = False,
):
    """
    Return a full list of laws and incentives that match your query.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v1/category-list.{output_format}', tags=['transportation_laws_operations'])
def transportation_incentives_laws_categories(
    output_format: OutputFormat1 = 'json',
    api_key: str = 'DEMO_KEY',
    type: Optional[Type] = None,
):
    """
    Return the law categories for a given category type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v1/pocs.{output_format}', tags=['transportation_incentives_management'])
def transportation_incentives_laws_pocs(
    output_format: OutputFormat1 = 'json',
    api_key: str = 'DEMO_KEY',
    jurisdiction: str = ...,
):
    """
    Get the points of contact for a given jurisdiction.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v1/{id}.{output_format}', tags=['transportation_laws_operations'])
def transportation_incentives_laws_id(
    output_format: OutputFormat1 = 'json',
    api_key: str = 'DEMO_KEY',
    id: int = ...,
    poc: Optional[bool] = False,
    expired: Optional[bool] = False,
):
    """
    Fetch the details of a specific law given the law's ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
